{"mappings":";;;AAAA;;CAEC,GACD;AAAA;;AAIA,MAAM,qCAAe,CAAC,IAAI,WAAa;IACrC,OAAO,IAAI,QAAQ,CAAA,UAAW;QAC5B,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAW;YAChC,QAAQ;QACV;IACF;AACF;AAEA;;;;;;;EAOE,GACF,MAAM,yCAAmB,SAAS,SAAS,EAAC;IAC1C,OAAO,IAAI,QAAQ,OAAM,UAAW;QAClC,IAAI,KAAK,gCAAyB;YAChC,OAAO;YACP,QAAQ;QACV;QACA,IAAI,UAAU,EAAE;QAChB,IAAI,IAAI,IAAE,GAAG,IAAE,UAAU,MAAM,EAAE,IAAI;YACnC,MAAM,SAAS,MAAM,mCAAa,IAAI,SAAS,CAAC,EAAE,GAAG;YACrD,QAAQ,IAAI,CAAC;QACf;QACA,GAAG,KAAK;QACR,QAAQ;IACV;AACF;AAEA,iBAAiB","sources":["src/node_console_ask.js"],"sourcesContent":["/**\r\n * Created by Rick on 2021-06-10.\r\n */\r\n'use strict';\r\n\r\nconst readline = require(\"readline\");\r\n\r\nconst ask_question = (rl, question) => {\r\n  return new Promise(resolve => {\r\n    rl.question(question, (answer) => {\r\n      resolve(answer);\r\n    })\r\n  })\r\n}\r\n\r\n/*\r\n* Displays sequentially at the console an array of questions\r\n* and records their corresponding console submitted answers.\r\n* The function returns a Promise object which if successful\r\n* its handler function parameter is assigned the array of answers.\r\n* @param {string array} questions\r\n* @return {Promise object}\r\n* */\r\nconst node_console_ask = function(questions){\r\n  return new Promise(async resolve => {\r\n    let rl = readline.createInterface({\r\n      input: process.stdin,\r\n      output: process.stdout\r\n    });\r\n    let results = [];\r\n    for(let i=0; i<questions.length; i++){\r\n      const result = await ask_question(rl, questions[i] + \" \");\r\n      results.push(result);\r\n    }\r\n    rl.close();\r\n    resolve(results);\r\n  })\r\n}\r\n\r\nmodule.exports = node_console_ask;\r\n\r\n"],"names":[],"version":3,"file":"main.js.map"}